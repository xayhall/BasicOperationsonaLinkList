#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string>
using namespace std;

struct AirQuality
{
	string uniqueId;
	string indicatorId;
	string name;
	string measure;
	string measureInfo;
	string geoTypeName;
	string geoJoinId;
	string geoPlaceName;
	string timePeriod;
	string startDate;
	string dataValue;
	AirQuality *link;
};

static AirQuality *head = nullptr;
static AirQuality *last = nullptr;
static int count = 0;

void DestroyList()
{
	AirQuality *temp;
	AirQuality *current;
	
	current = head;
	
	while(current != nullptr)
	{
		temp = current;
		current = current->link;
		delete temp;
	}
	;
	head = nullptr;
	last = nullptr;
	count = 0;
}

void DeleteLastItem()
{
	//empty list
	if (head == nullptr)
	{
		cout << "Error, not elements in list!" << endl;
		
	}
	//one element in list
	else if (head->link == nullptr)
	{
		delete head;
		head = nullptr;
	}
	//two or more elements
	else
	{
		AirQuality *current = head;
		AirQuality *prev = nullptr;
		
		while (current->link != nullptr)
		{
			prev = current;
			current = current->link;
		}
		prev->link = nullptr;
		delete current;
		last = prev;
	}
	
	count--;
	
}

void DeleteItem(string searchItem)
{
	AirQuality *current = head;
	AirQuality *prev = nullptr;
	bool found = false;
	
	while (current != nullptr && !found)
	{
		if (current->uniqueId == searchItem)
		{
			found = true;
		}
		else
		{
			prev = current;
			current = current->link;
		}
	}
	
	if (found == true)
		{
			
			if(head->link == nullptr)
				{
					delete head;
					head = nullptr;
				}
			
			
			else if (current == head)
				{
					head = current->link;
					delete current;
		
				}
			else if (current == last)
				{
					prev->link = nullptr;
					delete current;
					last = prev;
				}
			else
				{
					prev->link = current->link;
					delete current;
				}
				
			count--;
			cout << "Item was deleted.";	
		}
	else
		{
			cout << "Item not found!" << endl;
		}
}

void InitializeList()
{
	
	AirQuality *newNode = nullptr;
	AirQuality *current = nullptr;
	
	fstream file("BasicOperationsofaLinkList.txt");//opens the input file
	
	if (file.is_open())
	{
		while(file.good())
		{
			newNode = new AirQuality;
			getline(file, newNode->uniqueId);
			getline(file, newNode->indicatorId);
			getline(file, newNode->name);
			getline(file, newNode->measure);
			getline(file, newNode->measureInfo);
			getline(file, newNode->geoTypeName);
			getline(file, newNode->geoJoinId);
			getline(file, newNode->geoPlaceName);
			getline(file, newNode->timePeriod);
			getline(file, newNode->startDate);
			getline(file, newNode->dataValue);
			count++;
			newNode->link = nullptr;
			
			if (head == nullptr)
			{
				head = newNode;
			}
			else
			{
				current = head;
				while(current->link != nullptr)
				{
					current = current->link;
				}
				current->link = newNode;
			}
			
			last = newNode;
		}
		file.close();
	}
	else 
		{
		cout << "An error has occured";
		}
		
	DeleteLastItem();
	
	cout << "List has been initailed";
}


void PrintList()
{
	AirQuality *current = head;
	
	while(current != nullptr)
	{
		cout << "Unique Id: " << current->uniqueId << endl;
		cout << "Indicator Id: " << current->indicatorId << endl;
		cout << "Name: " << current->name << endl;
		cout << "Measure: " << current->measure << endl;
		cout << "Measure Info: " << current->measureInfo << endl;
		cout << "Geo Type Name: " << current->geoTypeName << endl;
		cout << "Geo Join Id: " << current->geoJoinId << endl;
		cout << "Geo Place Name: " << current->geoPlaceName << endl;
		cout << "Time Period: " << current->timePeriod << endl;
		cout << "Start Date: " << current->startDate << endl;
		cout << "Data Value: " << current->dataValue << endl;
		current = current->link;
		cout<< endl;
		
	}
}

void GetFirstItem()
{
	AirQuality *current = head;
	
	if (current == nullptr)
	{
		cout << "Error, the list is empty!" << endl;
	}
	else
	{
		cout << "Unique Id: " << current->uniqueId << endl;
		cout << "Indicator Id: " << current->indicatorId << endl;
		cout << "Name: " << current->name << endl;
		cout << "Measure: " << current->measure << endl;
		cout << "Measure Info: " << current->measureInfo << endl;
		cout << "Geo Type Name: " << current->geoTypeName << endl;
		cout << "Geo Join Id: " << current->geoJoinId << endl;
		cout << "Geo Place Name: " << current->geoPlaceName << endl;
		cout << "Time Period: " << current->timePeriod << endl;
		cout << "Start Date: " << current->startDate << endl;
		cout << "Data Value: " << current->dataValue << endl;
	}
}

void GetLastItem()
{
	AirQuality *current = last;
	
	if (current == nullptr)
	{
		cout << "Error, the list is empty!" << endl;
	}
	else
	{	
		cout << "Unique Id: " << current->uniqueId << endl;
		cout << "Indicator Id: " << current->indicatorId << endl;
		cout << "Name: " << current->name << endl;
		cout << "Measure: " << current->measure << endl;
		cout << "Measure Info: " << current->measureInfo << endl;
		cout << "Geo Type Name: " << current->geoTypeName << endl;
		cout << "Geo Join Id: " << current->geoJoinId << endl;
		cout << "Geo Place Name: " << current->geoPlaceName << endl;
		cout << "Time Period: " << current->timePeriod << endl;
		cout << "Start Date: " << current->startDate << endl;
		cout << "Data Value: " << current->dataValue << endl;
	}
}

void InsertItem(string uId, string iId, string name, string mea, string meaInfo, string gtn, string gji, string gpn, string tp, string sd, string dv)
{
		if (head == nullptr)
		{
			cout << "The list needs to be initialized before adding items to it."<< endl;
		}
		else
		{
			
		AirQuality *newNode = nullptr;
		
		newNode = new AirQuality;
		newNode->uniqueId = uId;
		newNode->indicatorId = iId;
		newNode->name = name;
		newNode->measure = mea;
		newNode->measureInfo = meaInfo;
		newNode->geoTypeName = gtn;
		newNode->geoJoinId = gji;
		newNode->geoPlaceName = gpn;
		newNode->timePeriod = tp;
		newNode->startDate = sd;
		newNode->dataValue = dv;
		count++;
		newNode->link = nullptr;
		
		last->link = newNode;
		last = newNode;
		
		cout << "Item was inserted.";
		}
}

void SearchForItem(string searchItem)
{
	AirQuality *current = head;
	bool found = false;
	
	while (current != nullptr && !found)
	{
		if (current->uniqueId == searchItem)
		{
			found = true;
		}
		else
		{
			current = current->link;
		}
	}
	
	if (found == true)
		{
			cout << "Unique Id: " << current->uniqueId << endl;
			cout << "Indicator Id: " << current->indicatorId << endl;
			cout << "Name: " << current->name << endl;
			cout << "Measure: " << current->measure << endl;
			cout << "Measure Info: " << current->measureInfo << endl;
			cout << "Geo Type Name: " << current->geoTypeName << endl;
			cout << "Geo Join Id: " << current->geoJoinId << endl;
			cout << "Geo Place Name: " << current->geoPlaceName << endl;
			cout << "Time Period: " << current->timePeriod << endl;
			cout << "Start Date: " << current->startDate << endl;
			cout << "Data Value: " << current->dataValue << endl;	
		}
		else
		{
			cout << "Item not found!" << endl;
		}
}


int Length()
{
	
	return count;
}

bool IsEmpty() //returns 1 if list is empty and 0 if list is not empty
{
	return (head == nullptr);
}

void CopyList()
{
	AirQuality *newNode;
	AirQuality *current;
	AirQuality *first;
	
	if (head == nullptr)
	{
		head = nullptr;
		last = nullptr;
		count = 0;
	}
	else
	{
		current = head;
		
		count = Length();
		
		first = new AirQuality;
		first->uniqueId = current->uniqueId;
		first->indicatorId = current->indicatorId;
		first->name = current->name;
		first->measure = current->measure;
		first->measureInfo = current->measureInfo;
		first->geoTypeName = current->geoTypeName;
		first->geoJoinId = current->geoJoinId;
		first->geoPlaceName = current->geoPlaceName;
		first->timePeriod = current->timePeriod;
		first->startDate = current->startDate;
		first->dataValue = current->dataValue;
		last = first;
		head = first;
		current = current->link;
		
		while(current != nullptr)
		{
			newNode = new AirQuality;
			newNode->uniqueId = current->uniqueId; ;
			newNode->indicatorId = current->indicatorId;;
			newNode->name = current->name;
			newNode->measure = current->measure;
			newNode->measureInfo = current->measureInfo;
			newNode->geoTypeName = current->geoTypeName;
			newNode->geoJoinId = current->geoJoinId;
			newNode->geoPlaceName = current->geoPlaceName;
			newNode->timePeriod = current->timePeriod;
			newNode->startDate = current->startDate;
			newNode->dataValue = current->dataValue;
			newNode->link = nullptr;
		
			last->link = newNode;
			last = newNode;
			current = current->link;
		}
		
	}
}

void BasicOperationsProgram()
{
	cout << "Welcome to the AirQuality Data Set!" << endl << endl;
	
	
	cout << "The menu options are:" << endl;

	cout << "1.Initialize the list." << endl;

    cout << "2.Determine whether the list is empty." << endl;

	cout << "3.Print the list." << endl;

	cout << "4.Find the length of the list." << endl;

	cout << "5.Destroy the list." << endl;

	cout << "6.Retrieve the info contained in the first node." << endl;

	cout << "7.Retrieve the info contained in the last node." << endl;

	cout << "8.Search the list for a given item." << endl;

	cout << "9.Insert an item in the list." << endl;

	cout << "10.Delete an item from the list." << endl;

	cout << "11.Make a copy of the linked list." << endl << endl;
	
	int option;
	//bool listdestroyed = false;
	
	cout << "Enter an option number(-1 to stop): ";
	cin >> option;
	
	while (option != -1)
	{
		if (option == 1)
		{
			InitializeList();
			cout << endl << endl;
		}
		else if (option == 2)
		{
			cout << IsEmpty() << endl << endl;
		}
		else if (option == 3)
		{
			PrintList();
			cout << endl << endl;
		}
		else if (option == 4)
		{
			cout << Length() << endl << endl;
		}
		else if (option == 5)
		{
			char prompt;
			cout << "Selecting this option will destroy your data and terminate the program" << endl;
			
			cout << "Do you wish to continue(Y/N)?: ";
			cin >> prompt;
			
			if (prompt == 'Y')
			{
				DestroyList();
				//listdestroyed = true;
				break;
				cout << endl<< endl;
			}
			
			cout << endl<< endl;
		}
		else if (option == 6)
		{
			GetFirstItem();
			cout << endl << endl;
		}
		else if (option == 7)
		{
			GetLastItem();
			cout << endl << endl;
		}
		else if (option == 8)
		{
			string uniqueId;
			
			cout << "Enter the uniqueId of the requested item (a list of id's has been provided on submission doc): ";
			cin >> uniqueId;
			
			SearchForItem(uniqueId);
			cout << endl << endl;
		}
		else if (option == 9)
		{
			cout << "Please enter all requirement to insert a data record." << endl;
			
			string uId;
			string iId;
			string name;
			string mea;
			string meaInfo;
			string gtn;
			string gji;
			string gpn;
			string tp;
			string sd;
			string dv;
			
			cout << "Please enter a unique Id: ";
			cin >> uId;
			cout << endl;
			
			cout << "Please enter a indicator Id: ";
			cin >> iId;
			cout << endl;
			
			cout << "Please enter a name: ";
			cin >> name;
			cout << endl;
			
			cout << "Please enter a measure: ";
			cin >> mea;
			cout << endl;
			
			cout << "Please enter measure info: ";
			cin >> meaInfo;
			cout << endl;
			
			cout << "Please enter a geo type name: ";;
			cin >> gtn;
			cout << endl;
			
			cout << "Please enter a geo join id: ";
			cin >> gji;
			cout << endl;
			
			cout << "Please enter a geo place name: ";
			cin >> gpn;
			cout << endl;
			
			cout << "Please enter a time period: ";
			cin >> tp;
			cout << endl;
			
			cout << "Please enter a start date: ";
			cin >> sd;
			cout << endl;
			
			cout << "Please enter a data value: ";
			cin >> dv;
			cout << endl;
			
			InsertItem(uId,iId,name,mea,meaInfo,gtn,gji,gpn,tp,sd,dv);
			cout << endl << endl;
		}
		else if (option == 10)
		{
			string deleteItem;
			
			cout << "Enter the uniqueId of the item to be deleted (a list of id's has been provided on submission doc): ";
			cin >> deleteItem;
			
			DeleteItem(deleteItem);
			cout << endl << endl;
			
	
		}
		else if (option == 11)
		{
			CopyList();
			cout<< "List has been copied.";
			cout << endl << endl;
		}
		
		cout << "Enter an option number(-1 to stop): ";
		cin >> option;
	}
	
	cout << endl;
	cout << "GoodBye!!!!" << endl;
}



int main()
{
	BasicOperationsProgram();
	return 0;
}
